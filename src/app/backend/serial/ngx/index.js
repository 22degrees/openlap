import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
var Serial = /** @class */ (function (_super) {
    __extends(Serial, _super);
    function Serial() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Serial.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Serial.prototype.open = function (options) { return cordova(this, "open", {}, arguments); };
    Serial.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    Serial.prototype.writeHex = function (data) { return cordova(this, "writeHex", {}, arguments); };
    Serial.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    Serial.prototype.registerReadCallback = function () { return cordova(this, "registerReadCallback", { "observable": true }, arguments); };
    Serial.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Serial.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Serial, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
    Serial.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Serial });
    Serial.pluginName = "Serial";
    Serial.plugin = "cordovarduino";
    Serial.pluginRef = "serial";
    Serial.repo = "https://github.com/xseignard/cordovarduino";
    Serial.platforms = ["Android"];
    Serial = __decorate([], Serial);
    return Serial;
}(AwesomeCordovaNativePlugin));
export { Serial };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: Serial, decorators: [{
            type: Injectable
        }], propDecorators: { requestPermission: [], open: [], write: [], writeHex: [], read: [], registerReadCallback: [], close: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvc2VyaWFsL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHVDQUFtRyxNQUFNLCtCQUErQixDQUFDO0FBQ2hKLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7OztJQXVETiwwQkFBMEI7Ozs7SUFXcEQsa0NBQWlCLGFBQUMsT0FBaUM7SUFZbkQscUJBQUksYUFBQyxPQUEwQjtJQVcvQixzQkFBSyxhQUFDLElBQVM7SUFXZix5QkFBUSxhQUFDLElBQVM7SUFVbEIscUJBQUk7SUFZSixxQ0FBb0I7SUFVcEIsc0JBQUs7d0dBN0VNLE1BQU07NEdBQU4sTUFBTTs7Ozs7O0lBQU4sTUFBTSxrQkFBTixNQUFNO2lCQXpEbkI7RUF5RDRCLDBCQUEwQjtTQUF6QyxNQUFNOzRGQUFOLE1BQU07a0JBRGxCLFVBQVU7OEJBWVQsaUJBQWlCLE1BWWpCLElBQUksTUFXSixLQUFLLE1BV0wsUUFBUSxNQVVSLElBQUksTUFZSixvQkFBb0IsTUFVcEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBDb3Jkb3ZhSW5zdGFuY2UsIEluc3RhbmNlUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbFBlcm1pc3Npb25PcHRpb25zIHtcbiAgdmlkOiBzdHJpbmc7XG4gIHBpZDogc3RyaW5nO1xuICBkcml2ZXI6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxPcGVuT3B0aW9ucyB7XG4gIGJhdWRSYXRlOiBudW1iZXI7XG4gIGRhdGFCaXRzOiBudW1iZXI7XG4gIHN0b3BCaXRzOiBudW1iZXI7XG4gIHBhcml0eTogbnVtYmVyO1xuICBkdHI6IGJvb2xlYW47XG4gIHJ0czogYm9vbGVhbjtcbiAgc2xlZXBPblBhdXNlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIFNlcmlhbFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBwcm92aWRlcyBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBTZXJpYWwgY29ubmVjdGlvbnNcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNlcmlhbCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2VyaWFsL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzZXJpYWw6IFNlcmlhbCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5zZXJpYWwucmVxdWVzdFBlcm1pc3Npb24oKS50aGVuKCgpID0+IHtcbiAqICAgdGhpcy5zZXJpYWwub3Blbih7XG4gKiAgICAgYmF1ZFJhdGU6IDk4MDAsXG4gKiAgICAgZGF0YUJpdHM6IDQsXG4gKiAgICAgc3RvcEJpdHM6IDEsXG4gKiAgICAgcGFyaXR5OiAwLFxuICogICAgIGR0cjogdHJ1ZSxcbiAqICAgICBydHM6IHRydWUsXG4gKiAgICAgc2xlZXBPblBhdXNlOiBmYWxzZVxuICogICB9KS50aGVuKCgpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZygnU2VyaWFsIGNvbm5lY3Rpb24gb3BlbmVkJyk7XG4gKiAgIH0pO1xuICogfSkuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2VyaWFsJyxcbiAgcGx1Z2luOiAnY29yZG92YXJkdWlubycsXG4gIHBsdWdpblJlZjogJ3NlcmlhbCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veHNlaWduYXJkL2NvcmRvdmFyZHVpbm8nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNlcmlhbCBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFJlcXVlc3QgcGVybWlzc2lvbiB0byBjb25uZWN0IHRvIGEgc2VyaWFsIGRldmljZVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyB7U2VyaWFsUGVybWlzc2lvbk9wdGlvbnN9IE9wdGlvbnMgdXNlZCB0byByZXF1ZXN0IHNlcmlhbCBwZXJtaXNzaW9ucyBmb3IgYW4gdW5rbm93biBkZXZpY2VcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVybWlzc2lvbnMgYXJlIGdyYW50ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMixcbiAgfSlcbiAgcmVxdWVzdFBlcm1pc3Npb24ob3B0aW9ucz86IFNlcmlhbFBlcm1pc3Npb25PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuXG4gIC8qKlxuICAgKiBPcGVuIGNvbm5lY3Rpb24gdG8gYSBzZXJpYWwgZGV2aWNlXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIHtTZXJpYWxPcGVuT3B0aW9uc30gT3B0aW9ucyB1c2VkIHRvIG9wZW4gc2VyaWFsIGNvbm5lY3Rpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNlcmlhbCBjb25uZWN0aW9uIGlzIG9wZW5lZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBvcGVuKG9wdGlvbnM6IFNlcmlhbE9wZW5PcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgdG8gYSBzZXJpYWwgY29ubmVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSBkYXRhIHRvIHdyaXRlIHRvIHRoZSBzZXJpYWwgY29ubmVjdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgd3JpdGUgaXMgY29tcGxldGVcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgd3JpdGUoZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogV3JpdGUgaGV4IHRvIGEgc2VyaWFsIGNvbm5lY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge2FueX0gZGF0YSB0byB3cml0ZSB0byB0aGUgc2VyaWFsIGNvbm5lY3Rpb25cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHdyaXRlIGlzIGNvbXBsZXRlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHdyaXRlSGV4KGRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgZnJvbSBhIHNlcmlhbCBjb25uZWN0aW9uXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGRhdGEgcmVhZCBmcm9tIHRoZSBzZXJpYWwgY29ubmVjdGlvblxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWFkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhdGNoIHRoZSBpbmNvbWluZyBkYXRhIGZyb20gdGhlIHNlcmlhbCBjb25uZWN0aW9uLiBDbGVhciB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IE9ic2VydmFibGUgcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgeW91IGNhbiBzdWJzY3JpYmUgdG9cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICByZWdpc3RlclJlYWRDYWxsYmFjaygpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSB0aGUgc2VyaWFsIGNvbm5lY3Rpb25cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNlcmlhbCBjb25uZWN0aW9uIGlzIGNsb3NlZFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbG9zZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19